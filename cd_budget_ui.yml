trigger: none

pool:
  name: "Comp367_SH_Agent"

variables:
  dockerHubRepo: 'ronaldjrombao/comp367group'
  shortSha: $[substring(variables['Build.SourceVersion'], 0, 8)]
  containerName: 'budget-ui'
  networkName: 'comp367-net'
  exposedPort: '80'
  envToDeploy: 'PROD-Environment.RONALD-VM-X'

stages:
- stage: DeployToDev
  displayName: Deploy to Dev (Mock)
  jobs:
    - deployment: DevDeployment
      displayName: Mock Deployment to Dev
      environment: '$(envToDeploy)'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo "‚úÖ Mock deploy to DEV environment. No Docker image will be pulled or run."
                displayName: 'Mock Dev Deployment'

- stage: DeployToQA
  displayName: Deploy to QA (Mock)
  dependsOn: DeployToDev
  jobs:
    - deployment: QADeployment
      displayName: Mock Deployment to QA
      environment: '$(envToDeploy)'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo "‚úÖ Mock deploy to QA environment. No Docker image will be pulled or run."
                displayName: 'Mock QA Deployment'

- stage: DeployToStaging
  displayName: Deploy to Staging (Mock)
  dependsOn: DeployToQA
  jobs:
    - deployment: StagingDeployment
      displayName: Mock Deployment to Staging
      environment: '$(envToDeploy)'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: echo "‚úÖ Mock deploy to STAGING environment. No Docker image will be pulled or run."
                displayName: 'Mock Staging Deployment'

- stage: DeployToProd
  displayName: Deploy to Prod (REAL)
  dependsOn: DeployToStaging
  jobs:
    - deployment: ProdDeployment
      displayName: Real Deployment to Prod
      environment: '$(envToDeploy)'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Docker@2
                displayName: 'Login to Docker Hub'
                inputs:
                  command: login
                  containerRegistry: 'DockerHub'

              - script: |
                  echo "üîç Checking Docker network: $(networkName)..."
                  docker network inspect $(networkName) >nul 2>&1
                  if errorlevel 1 (
                    echo "‚õî Network not found. Creating..."
                    docker network create $(networkName)
                  ) else (
                    echo "‚úÖ Network $(networkName) already exists."
                  )
                displayName: 'Ensure Docker Network Exists'

              - script: |
                  echo "üõë Stopping existing API container if any..."
                  docker rm -f $(containerName) >nul 2>&1 || echo "No existing container to remove."

                  echo "‚¨áÔ∏è Pulling Docker image: $(dockerHubRepo):$(shortSha)"
                  docker pull $(dockerHubRepo):ui_latest

                  echo "üöÄ Running container: $(containerName) on port $(exposedPort)"
                  docker run -d --name $(containerName) --network $(networkName) -p $(exposedPort):80 $(dockerHubRepo):ui_latest
                displayName: 'Deploy API Container to PROD'
